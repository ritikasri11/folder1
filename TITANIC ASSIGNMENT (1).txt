data = spark.read.csv('titanic.csv', inferSchema=True, header=True)

data = data.select(['Survived', 'Pclass', 'Gender', 'Age', 'SibSp', 'Parch', 'Fare'])

data.show()

from pyspark.ml.feature import Imputer
imputer = Imputer(strategy='mean', inputCols=['Age'], outputCols=['AgeImputed'])
imputer_model = imputer.fit(data)
data = imputer_model.transform(data)


from pyspark.ml.feature import StringIndexer
gender_indexer = StringIndexer(inputCol='Gender', outputCol='GenderIndexed')
gender_indexer_model = gender_indexer.fit(data)
data = gender_indexer_model.transform(data)

from pyspark.ml.feature import VectorAssembler
assembler = VectorAssembler(inputCols=['Pclass', 'SibSp', 'Parch', 'Fare', 'AgeImputed', 'GenderIndexed'], outputCol='features')
data = assembler.transform(data)

data.show()

finalized_data = data.select('features','Survived')
finalized_data.show()

train_data,test_data = finalized_data.randomSplit([0.8,0.2])


from pyspark.ml.classification import RandomForestClassifier
algo = RandomForestClassifier(featuresCol='features', labelCol='Survived')
model = algo.fit(train_data)


predictions = model.transform(test_data)
pred = model.evaluate(test_data)
pred.predictions.show()


y_true = predictions.select(['Survived']).collect()
y_pred = predictions.select(['prediction']).collect()






from sklearn.metrics import classification_report


print(classification_report(y_true, y_pred))

                    actual                  predicted
true positive       has diabetes(yes)    has diabetes(yes)
true negative         no diabetes(no)      no diabetes(no)
false positive       no diabetes(no)      has diabetes(yes)
false negative       has diabetes          no diabetes(no)

precision:  TP/TP+FP

50/100


Recall : TP/ TP+FN


f1 score










